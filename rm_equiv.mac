/**/
/* Load packages */
file_search_maxima: append (file_search_maxima,["/Users/brobaidek/Documents/GitHub/nn_math_solver/maxima-code/share/numericalio/numericalio.mac"])$
load(numericalio)$
file_search_maxima: append (file_search_maxima,["/Users/brobaidek/Documents/GitHub/nn_math_solver/maxima-code/share/stringproc/stringproc.mac"])$
load(stringproc)$

/**/
/* Read a file and return a list of all lines */
readfile(name) := block(
   [v: [ ], f: openr(name), line],
   while stringp(line: readline(f)) do v: endcons(line, v),
   close(f),
   v
)$

/**/
/* Canonicalize all equation in the input text file and save as text_file.canonicalize */
canonicalize(input_text_file, output_text_file) :=  block(
  writefile(output_text_file),
  closefile(),

  input_list: readfile(input_text_file),
  closefile(),
  for line in input_list do (
    equations: split(line, " ; "),
    eqs_canonicalized: [],
    for eq in equations do (
      equation_sides: split(eq, " = "),
      /*print(concat("eq: ", eq)),
      print(string(rat(parse_string(concat("0 = ", equation_sides[2], " - ( ", equation_sides[1], " )"))))),*/
      eqs_canonicalized: append(eqs_canonicalized, [(concat(string(rat(parse_string(concat("0 = ", equation_sides[2], " - ( ", equation_sides[1], " )"))))))])
    ),
    final_line: "",
    i:1,
    for eq in sort(eqs_canonicalized) do (
      delim: "",
      if i>1 then delim: " ; ",
      (final_line: concat(final_line, delim, eq)),
      i:i+1
    ),
    file_output_append: true,
    set_tex_environment ("=", "!!!", "$$"),
    linel: 10000,
    print(final_line),
    with_stdout(output_text_file, print(final_line))

  ),
  closefile()
)$

/**/
/* Main Method */
/*canonicalize(canonicalize("./data/train.eq", "./data/train.can.eq"))$*/
/*canonicalize("./data/val.eq", "./data/val.can.eq")$*/
/*canonicalize("./data/test.eq", "./data/test.can.eq")$*/
canonicalize("./data/_new_data/kabseq.txt", "./data/_new_data/kabseq.can.txt")$
